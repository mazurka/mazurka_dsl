#|
adsfkl;jasdf
|#
- asdfkljsadf.
- asdf.
resource @users

User <- users:get(UserID)

NameParam <- #{
  name <- 'Name'
  required <- true
  type <- string
}

EmailParam <- #{
  name <- 'Email'
  required <- true
  validate <- emails:validate(Email)
}

- condition not(Auth/IsAuthenticated).
- param NameParam.
- param EmailParam.
create(Name Email) ->
  UserID <- users:create(Name Email)
  - redirect.
  @read(UserID).

read(UserID) ->
  #{
    name <- get("name" User)
    handle <- get("handle" User)

    - condition Auth/IsAuthenticated.
    - condition is("public" get("email_status" User)).
    email <- get("email" User)

    followers <- @followers:list(UserID)
    following <- @following:list(UserID)
    update <- @update(UserID)
    remove <- @remove(UserID)
  }.


Users <- users:list()

"""
assign
"""
UsersObjs <- [
  - concurrency 10.
  users:get(UserID) || UserID <- Users]


"""
Update function here action
"""
- condition is(UserID Auth/OwnerID).
- condition in('account.remove' Auth/Scopes).
- idempotent.
- param NameParam.
- param EmailParam.
update(UserID Name Email) ->
  _Res <- users:update(UserID Name Email)
  """
  adsflkjasdflk
  """
  - attr.
  @read(UserID).

- condition is(UserID Auth/OwnerID).
- condition in('account.update' Auth/Scopes).
- unsafe.
remove(UserID) ->
  _Res <- users:remove(UserID)
  - redirect.
  @root:index().
